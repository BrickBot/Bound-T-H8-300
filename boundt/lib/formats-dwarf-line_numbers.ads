-- Formats.Dwarf.Line_Numbers (decl)
--
-- Line-number information in DWARF form.
--
-- The line-number information associates the numbers of certain lines in
-- source-code files with the machine addresses of the instructions that
-- were generated from these lines. When the program executes such an
-- instruction one can in some sense say that it is executing the associated
-- source-code line, although the association is usually both ambiguous and
-- non-monotonic.
--
-- See the parent package Formats.Dwarf for a fuller explanation of
-- DWARF and references to the DWARF definition.
--
-- The DWARF line-number association goes beyond source-line numbers
-- (and source-file names) and includes source-file column numbers
-- and instruction classification such as whether a certain instruction
-- is associated with the beginning of a source statement, the beginning
-- of a basic block, or the end of the prelude or start of the postlude
-- of a subprogram. For target processors with several instruction sets,
-- the DWARF information can also specify the instruction set in use at
-- each code address.
--
-- For more information on the DWARF line-number representation and its
-- implementation here, see the private part of this package declaration.
--
-- Author: Niklas Holsti.
--
-- A component of the Bound-T Worst-Case Execution Time Tool.
--
-------------------------------------------------------------------------------
-- Copyright (c) 1999 .. 2015 Tidorum Ltd except for text copied verbatim
-- from the DWARF standard.
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are met:
--
-- 1. Redistributions of source code must retain the above copyright notice, this
--    list of conditions and the following disclaimer.
-- 2. Redistributions in binary form must reproduce the above copyright notice,
--    this list of conditions and the following disclaimer in the documentation
--    and/or other materials provided with the distribution.
--
-- This software is provided by the copyright holders and contributors "as is" and
-- any express or implied warranties, including, but not limited to, the implied
-- warranties of merchantability and fitness for a particular purpose are
-- disclaimed. In no event shall the copyright owner or contributors be liable for
-- any direct, indirect, incidental, special, exemplary, or consequential damages
-- (including, but not limited to, procurement of substitute goods or services;
-- loss of use, data, or profits; or business interruption) however caused and
-- on any theory of liability, whether in contract, strict liability, or tort
-- (including negligence or otherwise) arising in any way out of the use of this
-- software, even if advised of the possibility of such damage.
--
-- Other modules (files) of this software composition should contain their
-- own copyright statements, which may have different copyright and usage
-- conditions. The above conditions apply to this file.
-------------------------------------------------------------------------------
--
-- $Revision: 1.6 $
-- $Date: 2015/10/24 20:53:52 $
--
-- $Log: formats-dwarf-line_numbers.ads,v $
-- Revision 1.6  2015/10/24 20:53:52  niklas
-- Moved to free licence.
--
-- Revision 1.5  2009-01-18 08:42:44  niklas
-- Removed unused context clause.
--
-- Revision 1.4  2007/04/26 11:27:52  niklas
-- BT-CH-0059.
--
-- Revision 1.3  2007/01/25 21:25:36  niklas
-- BT-CH-0043.
--
-- Revision 1.2  2006/04/12 19:34:26  niklas
-- Corrected procedure Scan_Table to do nothing if the
-- line-number program is empty.
--
-- Revision 1.1  2004/04/24 18:06:20  niklas
-- First version.
--


with Formats.Dwarf.Opt;
with Formats.In_Memory;
with Unbounded_Vectors;


package Formats.Dwarf.Line_Numbers is


   Section_Name : constant String := ".debug_line";
   --
   -- The name of the object-file section(s) that holds DWARF
   -- line-number information.


   -- The DWARF line-number information is conceptually a large
   -- table, with one row for every machine code address (in the
   -- address range under consideration) and a number of columns.
   -- The following record type describes one row in the table,
   -- including the code-address column.

   type Row_T is record
      Address        : Code_Address_T;
      File           : Positive;
      Line           : Natural;
      Column         : Natural;
      Is_Stmt        : Boolean;
      Basic_Block    : Boolean;
      End_Sequence   : Boolean;
      Prologue_End   : Boolean;
      Epilogue_Begin : Boolean;
      ISA            : Natural;
   end record;
   --
   -- One row in the line-number table.
   --
   -- Address
   --    The program-counter value corresponding to a machine instruction
   --    generated by the compiler.
   -- File
   --    A positive integer indicating the identity of the source file
   --    corresponding to a machine instruction. The Source_File_Name
   --    function gives the string name of the file.
   -- Line
   --    The source-line number. Lines are numbered beginning at 1.
   --    The compiler may emit the value 0 in cases where an instruction
   --    cannot be attributed to any source line.
   -- Column
   --    An unsigned integer indicating a column within a source line.
   --    Columns are numbered beginning with 1. The value 0 is reserved to
   --    indicate that a statement begins at the "left edge" of the line.
   -- Is_Stmt
   --    Whether the current instruction is a recommended breakpoint
   --    location. A recommended breakpoint location is intended to
   --    "represent" a line, a statement and/or a semantically distinct
   --    subpartof a statement.
   -- Basic_Block
   --    Whether the current instruction is the beginning of a basic block.
   -- End_Sequence
   --    Whether the current address is that of the first byte after the
   --    end of a sequence of target machine instructions.
   -- Prologue_End
   --    Whether the current address is one (of possibly many) where
   --    execution should be suspended for an entry breakpoint of a
   --    subprogram.
   -- Epilogue_Begin
   --    Whether the current address is one (of possibly many) where
   --    execution should be suspended for an exit breakpoint of a
   --    subprogram.
   -- ISA
   --    An unsigned integer whose value encodes the applicable
   --    instruction set architecture for the current instruction.
   --
   -- For ISA, the specific encoding of instruction sets is defined
   -- in target-specific children, for example Formats.Dwarf.ARM.


   --
   --    Compilations (compilation units)
   --


   type Compilation_T is private;
   --
   -- Holds the DWARF line-number information from one compilation.
   -- The attributes include:
   --
   -- > The offset form the start of the DWARF line-number section.
   --   This works as a unique identified for this line-number
   --   set. Other DWARF objects use the offset as a reference
   --   to this line-number set, especially as the value of the
   --   Stmt_List attribute of a Compile_Unit entry.
   --
   -- > General information about the compilation, including the
   --   participating source files and the directories searched for
   --   inclusion files.
   --
   -- > The line-number program.


   function Section_Offset (Item : Compilation_T)
   return Section_Offset_T;
   --
   -- The offset (in octets) from the start of the DWARF line-number
   -- section. It refers to the first octet of line-number data for
   -- the given compilation.


   function Source_File_Name (
      File   : Positive;
      Within : Compilation_T)
   return String;
   --
   -- The name of the source-file that is indicated by the File index
   -- number (from the Row_T.File component).
   --
   -- Propagates Format_Error if the File index is out of range or if
   -- other types of wrong data are encountered.


   generic

      type Result_Type is limited private;

      with procedure Action (
         Row    : in     Row_T;
         Prev   : in     Row_T;
         First  : in     Boolean;
         Last   : in     Boolean;
         From   : in     Compilation_T;
         Done   : in out Boolean;
         Result : in out Result_Type);

   procedure Scan_Table (
      From      : in     Compilation_T;
      Result    : in out Result_Type);
   --
   -- Scans the line-number table created From a given compilation
   -- unit, calling the Action procedure for each row. The roles of
   -- the Action parameters are as follows:
   --
   -- Row
   --    The current row in the line-number table.
   -- Prev
   --    The preceding row in the line-number table. This is either
   --    the same as Row in the preceding Action call, or is the
   --    initial state of the "row" registers in the line-number
   --    machine when Row is the first true table row.
   -- First
   --    Whether Row is the first true table row (and Prev is the
   --    initial-state row).
   -- Last
   --    Whether Row is the last table row, which is the row for the
   --    code address that follows the last instruction of the last
   --    instruction sequence in the compilation, created by the final
   --    DW_LNE_end_sequence instruction in the line-number program.
   -- From
   --    The Compilation that owns the line-number table.
   -- Done
   --    Given to Action as False. Action should set it True if the
   --    scanning is to stop here (no more rows to be scanned).
   -- Result
   --    An object of the generic formal Result_Type in which Action
   --    can return some result of the scan. In each call of Action,
   --    Scan_Table passes its own Result parameter to Action. Thus,
   --    the first Action call gets the same Result value as was passed
   --    to Scan_Table, and the Result value returned from the last
   --    Action call becomes the Result value returned from Scan_Table.
   --
   -- First and Last can both be True at the same time; this happens
   -- when the table consists only of the row created by the instruction
   -- DW_LNE_end_sequence. In this case, Prev is the initial-state row
   -- and Row is the DW_LNE_end_sequence row. (It is not clear if a
   -- DWARF producer would really create such a null table.)
   --
   -- The parameters of Scan_Table have the following roles:
   --
   -- From
   --    The compilation whose line-number table will be scanned.
   -- Result
   --    The Result object passed in and out of each Action call.
   --
   -- If the line-number program is empty (start index = end index),
   -- the procedure does nothing and never calls Action.


   --
   --    Collected information for a compilation set
   --


   type Compilation_Set_T is private;
   --
   -- Holds the DWARF line-number information from one ".debug_line"
   -- section which consists of the line-number information from zero
   -- or more compilations.
   --
   -- Individual compilations (sets of line-number info for one
   -- compilation) within the compilation-set are identified by the
   -- offset from the start of the line-number section.
   --
   -- The default initial value of any Compilation_Set_T object is
   -- a null object.


   function Is_Null (Item : Compilation_Set_T) return Boolean;
   --
   -- Whether the compilation set is a null object and contains no
   -- DWARF line-number information.


   procedure Load (
      From    : in     IO.File_Type;
      Section : in     Segment_Desc_T;
      Giving  :    out Compilation_Set_T);
   --
   -- Creates an empty compilation set from a DWARF line-number
   -- section that resides in a given file. The compilation-set
   -- at this point is a non-null object but only contains a copy
   -- of the raw section data; line-number information for individual
   -- compilation units is extracted on demand. 


   function Compilation (
      At_Offset : Section_Offset_T;
      Within    : Compilation_Set_T)
   return Compilation_T;
   --
   -- The line-number information for a specific compilation,
   -- residing At the given Offset, Within a compilation-set.
   --
   -- Propagates Format_Error if the compilation header is erroneous
   -- in some way. This may also happen if the given offset does
   -- not point to the start of a compilation.


   procedure Dump (
      Section : in Segment_Desc_T;
      From    : in IO.File_Type);
   --
   -- Displays all of the DWARF line-number information From the
   -- given object or executable file, from the indicated section
   -- which should be a ".debug_line" section. The information is
   -- not loaded.
   --
   -- This operation never propagates Format_Error.


private


   --    Principles of DWARF line-number information
   --
   -- The line-number table of Rows_T is not represented as concretely,
   -- but as an algorithm or "line-number program" that is executed and
   -- generates table rows one by one.
   --
   -- The line-number program works with a "current row state" which it
   -- incrementally updates by "operations" that change this or that
   -- column in the current row state. Specific operations in the
   -- line-number program generate a table row that contains the
   -- current row state.
   --
   -- The line-number program is represented as a sequence of operations
   -- where each operation starts with an operation code (opcode)
   -- followed by zero or more operation operands. A compilation-unit
   -- header records precedes the line-number program and initializes
   -- the current row state assumed by the line-number program.
   --
   -- In the DWARF standard, the current row state is considered to
   -- consist of a "register" for each column. For example, the "address
   -- register" contains the value for Row.Address.


   subtype Opcode_T is Unsigned_8_T;
   --
   -- Identifies an operation in the line-number machine.
   -- The opcodes fall into three ranges:
   --
   -- Standard opcodes: 1 .. Opcode_Base - 1.
   --    Opcodes defined in the DWARF standard(s).
   --    The opcode is followed by a zero or more LEB128 operands (except
   --    for the Fixed_Advance_PC opcode). By setting Opcode_Base to
   --    less than than the largest opcode defined in the DWARF standards,
   --    a DWARF producer can reclassify some opcodes as "special" rather
   --    than standard.
   --
   -- Special opcodes: Opcode_Base .. 255
   --    The opcode is not followed by any operands. Most of the operations
   --    in a typical line-number program are special opcodes.
   --    The opcode is actually an encoding of a special operation and
   --    some (small) operands for the special operation, so the operands
   --    can be seen as embedded in the opcode. 
   --
   -- Extended opcodes: Opcode = zero
   --    The zero opcode is followed by a LEB128 number giving the number
   --    of octets in the operation itself (does not include the first
   --    zero opcode octet nor the size). The remaining octets are the
   --    operation itself (which begins with an unsigned octet giving
   --    the extended opcode).


   type Opcode_Lengths_T is array (Opcode_T) of Unsigned_8_T;
   --
   -- Specifies the number of operands following each standard or
   -- vendor-specific opcode.


   type String_Ref is access String;
   --
   -- Refers to a path name or a file name.


   procedure Read_String (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out    String_Ref);
   --
   -- Reads a null-terminated string from a DWARF section.
   -- Returns a null reference if the string is null, i.e. if
   -- the first octet is a null octet. In any case, the terminating
   -- null octet is consumed; the stream is left the next octet.
   --
   for String_Ref'Read use Read_String;


   type String_Ref_List_T is array (Positive range <>) of String_Ref;
   --
   -- A list of strings (via access).
   -- The index may or may not be logically significant.


   package Unbounded_String_Vectors
   is new Unbounded_Vectors (
      Element_Type => String_Ref,
      Vector_Type  => String_Ref_List_T,
      Deallocate   => Opt.Deallocate);

   type String_Vector_T is new Unbounded_String_Vectors.Unbounded_Vector;
   --
   -- An array of strings (via reference) of unbounded length.
   -- Used for listing include-directory path-names.


   procedure Read_String_Vector (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out    String_Vector_T);
   --
   -- Reads a list of null-terminated strings from a DWARF section.
   -- The end of the list is indicated by a null string (i.e. a null
   -- octet where the first octet of a string is expected). This null
   -- octet is consumed; the Stream is left at the following octet.
   --
   for String_Vector_T'Read use Read_String_Vector;


   subtype File_Length_T is Unsigned_32_LEB128_T;
   --
   -- The length of a source file, in octets.


   type File_Info_T is record
      Name        : String_Ref;
      Dir_Index   : Natural;
      Timestamp   : Timestamp_T;
      File_Length : File_Length_T;
   end record;
   --
   -- Information about a source file that contributed to the line-
   -- number information for this compilation unit or is used in other
   -- contexts, such as in a declaration coordinate or a macro file
   -- inclusion.
   --
   -- Name
   --    The name of the file. It can be a simple name or a full path
   --    name including directories.
   -- Dir_Index
   --    The index in the Include_Directories vector (see below) of
   --    the path name of the directory in which the file was found
   --    in the current compilation. Zero if the file was found in
   --    the current directory of the compilation.
   --    Dir_Index should be ignored if the Name is a path name.
   -- Timestamp
   --    The (implementation-defined) time of last modification
   --    for the file.
   -- File_Length
   --    The length in octets of the file.
   --
   -- Timestamp and File_Length can be zero if the DWARF producer does
   -- not have this information available.


   procedure Read_File_Info (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out File_Info_T);
   --
   -- Reads one File_Info bunch from the stream, starting with the
   -- file name. If the file name is a null string, it is taken
   -- to mean the absence of file info; no more components of
   -- Item are read.
   --
   for File_Info_T'Read use Read_File_Info;


   type File_List_T is array (Positive range <>) of File_Info_T;
   --
   -- An array of file-information records.
   -- The index may or may not be logically significant.


   package Unbounded_File_Vectors
   is new Unbounded_Vectors (
      Element_Type => File_Info_T,
      Vector_Type  => File_List_T,
      Deallocate   => Opt.Deallocate);


   type File_Vector_T is new Unbounded_File_Vectors.Unbounded_Vector;
   --
   -- An array of file-info records of unbounded length.
   -- Used for listing all the source files uses in a compilation.


   type File_Vector_Ref is access File_Vector_T;
   --
   -- A reference to an array of file-info records of unbounded length.
   -- We use a reference so that the first traversal of the line-number
   -- program of a compilation unit can add the new files defined by
   -- DW_LNE_define_file, without needing to update the whole unit-
   -- header record or the compilation-unit record.


   procedure Read_File_Vector (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out File_Vector_Ref);
   --
   -- Reads a file-info vector from the Stream.
   -- The sequence is terminated by a single null octet after the
   -- last file-info record. This null octet is consumed; the Stream
   -- is left at the following octet.
   --
   for File_Vector_Ref'Read use Read_File_Vector;


   type Unit_Header_T is record
      Unit_Length                : Initial_Length_T;
      Version                    : Version_T;
      Header_Length              : Variant_Unsigned_T;
      Minimum_Instruction_Length : Unsigned_8_T;
      Default_Is_Stmt            : Boolean_T;
      Line_Base                  : Signed_8_T;
      Line_Range                 : Unsigned_8_T;
      Opcode_Base                : Opcode_T;
      Standard_Opcode_Lengths    : Opcode_Lengths_T;
      Include_Directories        : String_Vector_T;
      Files                      : File_Vector_Ref;
      Num_Files                  : Natural;
   end record;
   --
   -- Header for the line-number program for each compilation unit.
   --
   -- Unit_Length
   --    The total length, in octets, of the line-number information for
   --    this compilation unit, not including the Unit_Length field itself.
   --
   -- Version
   --    A version number. This version number is specific to the
   --    line-number information and is independent of the DWARF
   --    version number.
   --    For DWARF 3, Version = 3.
   --
   -- Header_Length
   --    The number of octets following the Header_Length field to
   --    the beginning of the first octet of the line-number program
   --    itself.
   -- 
   -- Minimum_Instruction_Length
   --    The size in octets of the smallest target machine instruction.
   --    Line-number program operations that alter the address register
   --    first multiply their operands by this value.
   --
   -- Default_Is_Stmt
   --    The initial value of the Is_Stmt register.
   --
   -- Line_Base
   --    A parameter that affects the meaning of the special opcodes.
   --
   -- Line_Range
   --    A parameter that affects the meaning of the special opcodes.
   --
   -- Opcode_Base
   --    The number assigned to the first special opcode.
   --    By decreasing Opcode_Base, a DWARF producer can extend the range
   --    of operand values that can be embedded in special opcodes.
   --    By increasing Opcode_Base, a DWARF producer can reserve more
   --    non-special opcodes for vendor-specific extensions.
   --
   -- Standard_Opcode_Lengths
   --    Defined for Opcode indices in the range 1 .. Opcode_Base - 1,
   --    this array gives the number of LEB128 operands that will follow
   --    each standard Opcode.
   --    Opcode = 0 is not used because it introduces extended operations.
   --    Opcodes larger or equal to Opcode_Base are special opcodes and
   --    have no LEB128 operands.
   --
   -- Include_Directories
   --    Sequence of directory path names that were searched for included
   --    source files in this compilation. The paths include those
   --    directories specified explicitly by the user for the compiler
   --    to search and those the compiler searches without explicit
   --    direction. Each path entry is either a full path name or is
   --    relative to the current directory of the compilation. The
   --    current directory is understood to be the first entry and is
   --    not explicitly represented.
   --
   -- Files
   --    Sequence of information records for each source file that
   --    contributed to the line-number information for this compilation
   --    unit or is used in other contexts, such as in a declaration
   --    coordinate or a macro file inclusion.
   --    A reference is used so that more file-info records can be
   --    added without need to update the containing records.
   --
   -- Num_Files
   --    The number of source files that were defined in the header,
   --    rather than via DW_LNE_define_file instructions in the
   --    line-number program. This is the original Length of the
   --    Files sequence, before any files were added by such
   --    instructions. Num_Files <= Length (Files); the difference
   --    is the number of executed DW_LNE_define_files instructions.


   procedure Read_Unit_Header (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out    Unit_Header_T);
   --
   -- Reads a Unit_Header from the Stream.
   --
   for Unit_Header_T'Read use Read_Unit_Header;


   type Compilation_T is record
      Stream     : In_Memory.Stream_Ref;
      Offset     : Section_Offset_T;
      Header     : Unit_Header_T;
      Prog_Start : In_Memory.Index_T;
      Prog_End   : In_Memory.Index_T;
   end record;
   --
   -- Line-number information for one compilation (unit).
   --
   -- Stream
   --    A reference to an in-memory buffer that holds DWARF line-
   --    number info for this compilation unit and perhaps other
   --    compilation units.
   -- Offset
   --    The offset in the ".debug_line" section (and thus in Stream)
   --    where this information starts. It is the offset of the first
   --    octet of the Unit_Length field in the Header.
   -- Header
   --    The line-number info header for this compilation.
   -- Prog_Start
   --    The index in Stream of the start of the line-number program.
   -- Prog_End
   --    The index in Stream of the end of the line-number program.
   --    It is the index of the octet after the final instruction in
   --    the program. This index may be beyond the end of the Stream.


   type Compilation_Set_T is record
      Stream : In_Memory.Stream_Ref;
   end record;
   --
   -- Stream
   --    An in-memory buffer holding the DWARF line-number section.
   --
   -- Line-number information for individual compilation units is
   -- retrieved from the Stream on demand, given the Offset of
   -- the compilation unit.


end Formats.Dwarf.Line_Numbers;
