-- Formats (decl)
--
-- Parent package and common declarations for binary file formats.
--
-- When each file-format is defined and read using these common
-- types, it becomes easier to load data from several different file
-- formats into the same kind of memory content structure. For example,
-- the same Bound-T version can support both ELF and COFF input, since
-- the same type of data is generated by both.
--
-- Author: Niklas Holsti.
--
-- A component of the Bound-T Worst-Case Execution Time Tool.
--
-------------------------------------------------------------------------------
-- Copyright (c) 1999 .. 2015 Tidorum Ltd
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are met:
--
-- 1. Redistributions of source code must retain the above copyright notice, this
--    list of conditions and the following disclaimer.
-- 2. Redistributions in binary form must reproduce the above copyright notice,
--    this list of conditions and the following disclaimer in the documentation
--    and/or other materials provided with the distribution.
--
-- This software is provided by the copyright holders and contributors "as is" and
-- any express or implied warranties, including, but not limited to, the implied
-- warranties of merchantability and fitness for a particular purpose are
-- disclaimed. In no event shall the copyright owner or contributors be liable for
-- any direct, indirect, incidental, special, exemplary, or consequential damages
-- (including, but not limited to, procurement of substitute goods or services;
-- loss of use, data, or profits; or business interruption) however caused and
-- on any theory of liability, whether in contract, strict liability, or tort
-- (including negligence or otherwise) arising in any way out of the use of this
-- software, even if advised of the possibility of such damage.
--
-- Other modules (files) of this software composition should contain their
-- own copyright statements, which may have different copyright and usage
-- conditions. The above conditions apply to this file.
-------------------------------------------------------------------------------
--
-- $Revision: 1.8 $
-- $Date: 2015/10/24 20:53:54 $
--
-- $Log: formats.ads,v $
-- Revision 1.8  2015/10/24 20:53:54  niklas
-- Moved to free licence.
--
-- Revision 1.7  2014/06/20 19:45:43  niklas
-- Added write operations for Unsigned_16 and Unsigned_32.
--
-- Revision 1.6  2009-01-18 08:42:23  niklas
-- Corrected description of Read_Signed_16.
--
-- Revision 1.5  2008/10/11 05:56:44  niklas
-- BT-CH-0147: Intel-Hex with linear 32-bit addresses.
--
-- Revision 1.4  2007/02/27 22:10:40  Niklas
-- Corrected 'Read procedures for scalar types to use the 'Base
-- subtype of the scalar type and not to use Read operations inherited
-- from parent types (and so having "intrinsic" convention).
--
-- Revision 1.3  2005/10/24 17:28:29  niklas
-- Using Compiler types for 64-bit entities.
--
-- Revision 1.2  2004/08/23 13:23:32  niklas
-- Added bit-field extraction functions.
-- Made "0x" prefix optional in hexadecimal images.
--
-- Revision 1.1  2004/04/24 17:22:43  niklas
-- First version.
--


with Ada.Streams.Stream_IO;
with Interfaces;

with Compiler;


package Formats is


   package IO renames Ada.Streams.Stream_IO;
   --
   -- Binary files are usually read as streams of octets.
   -- Octet-ordering and other parsing is specific to the
   -- file format.


   --
   ---   Integer types
   --


   type Octet_T is new Interfaces.Unsigned_8;
   --
   -- Eight bits.


   type Octets_T is array (Natural range <>) of Octet_T;
   --
   -- A string of eight-bit data.


   subtype Unsigned_8_T is Octet_T;
   --
   -- An unsigned 8-bit word. A synonym for Octet_T.


   type Signed_8_T is new Interfaces.Integer_8;
   --
   -- A signed 8-bit word.


   type Unsigned_16_T is new Interfaces.Unsigned_16;
   --
   -- An unsigned 16-bit word.


   type Signed_16_T is new Interfaces.Integer_16;
   --
   -- A signed 16-bit word.


   type Unsigned_32_T is new Interfaces.Unsigned_32;
   --
   -- An unsigned 32-bit word.


   type Signed_32_T is new Interfaces.Integer_32;
   --
   -- A signed 32-bit word.


   type Unsigned_64_T is new Compiler.Unsigned_64;
   --
   -- An unsigned 64-bit word, if the compiler supports it.


   type Signed_64_T is new Compiler.Integer_64;
   --
   -- A signed 64-bit word, if the compiler supports it.


   --
   ---   Signed/unsigned conversions
   --


   function To_Signed (Item : Unsigned_8_T) return Signed_8_T;
   --
   -- Interprets an 8-bit quantity as a two's complement signed number.


   function To_Signed (Item : Unsigned_16_T) return Signed_16_T;
   --
   -- Interprets a 16-bit quantity as a two's complement signed number.


   function To_Signed (Item : Unsigned_32_T) return Signed_32_T;
   --
   -- Interprets a 32-bit quantity as a two's complement signed number.


   function To_Signed (Item : Unsigned_64_T) return Signed_64_T;
   --
   -- Interprets a 64-bit quantity as a two's complement signed number.


   --
   ---   Endianness
   --


   type Endian_T is (Little, Big);
   --
   -- Endianness (byte/octet order) to be used for reading
   -- multi-octet binary numbers from a file.
   --
   -- Little
   --    Octets are stored in order of increasing significance,
   --    least significant octet first.
   -- Big
   --    Octets are stored in order of decreasing significance,
   --    most significant octet first.


   Endian : Endian_T := Little;
   --
   -- The endianness to be used in all Read operations.


   Format_Error : exception;
   --
   -- The operations that access binary program information from executable
   -- files raise this exception if they encounter some violation of the
   -- file-format rules or implementation constraints.


   --
   ---   Assembling octet sequences into integer numbers
   --


   function Value (
      Octets : Octets_T;
      Endian : Endian_T)
   return Unsigned_32_T;
   --
   -- The unsigned number formed from the sequence of Octets,
   -- taken in the given Endianness.


   --
   ---   Reading and writing integer numbers
   --


   procedure Read_Unsigned_16 (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out Unsigned_16_T'Base);
   --
   -- Reads a 16-bit quantity from the stream, as two octets,
   -- using the current endianness.

   for Unsigned_16_T'Read use Read_Unsigned_16;


   procedure Write_Unsigned_16 (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : in     Unsigned_16_T'Base);
   --
   -- Writess a 16-bit quantity to the stream, as two octets,
   -- using the current endianness.

   for Unsigned_16_T'Write use Write_Unsigned_16;


   procedure Read_Signed_16 (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out Signed_16_T'Base);
   --
   -- Reads a signed (two's complement) 16-bit quantity from the
   -- stream, as two octets, using the current endianness.

   for Signed_16_T'Read use Read_Signed_16;


   procedure Read_Unsigned_32 (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out Unsigned_32_T'Base);
   --
   -- Reads a 32-bit quantity from the stream, as four octets,
   -- using the current endianness.

   for Unsigned_32_T'Read use Read_Unsigned_32;


   procedure Write_Unsigned_32 (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : in     Unsigned_32_T'Base);
   --
   -- Writess a 32-bit quantity to the stream, as four octets,
   -- using the current endianness.

   for Unsigned_32_T'Write use Write_Unsigned_32;


   procedure Read_Signed_32 (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out Signed_32_T'Base);
   --
   -- Reads a signed (two's complement) 32-bit quantity from the
   -- stream, as four octets, using the current endianness.

   for Signed_32_T'Read use Read_Signed_32;


   procedure Read_Unsigned_64 (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out Unsigned_64_T'Base);
   --
   -- Reads a 64-bit quantity from the stream, as eight octets,
   -- using the current endianness.

   for Unsigned_64_T'Read use Read_Unsigned_64;


   procedure Read_Signed_64 (
      Stream : access Ada.Streams.Root_Stream_Type'Class;
      Item   : out Signed_64_T'Base);
   --
   -- Reads a signed (two's complement) 64-bit quantity from the
   -- stream, as eight octets, using the current endianness.

   for Signed_64_T'Read use Read_Signed_64;


   --
   --    Extracting bit fields
   --


   subtype Octet_Bit_T is Natural range 0 .. 7;
   --
   -- The number of a bit within an octet.
   -- Bit zero is the least significant bit, bit 7 the most significant.


   subtype Bit_16_T is Natural range 0 .. 15;
   --
   -- The number of a bit within a 16-bit unsigned number.
   -- The LSB is number 0, the MSB if number 15.


   subtype Bit_32_T is Natural range 0 .. 31;
   --
   -- The number of a bit within a 32-bit unsigned number.
   -- The LSB is number 0, the MSB is number 31.


   function Bits (
      High : Octet_Bit_T;
      Low  : Octet_Bit_T;
      From : Octet_T)
   return Octet_T;
   --
   -- Extracts and returns the bits of "From" between
   -- bit number "High" (msb) and "Low" (lsb).
   -- The extracted bits are returned in the lsb's of the result.
   -- For example, if one bit is extracted, the value is 0 or 1.


   function Bits (
      High : Bit_16_T;
      Low  : Bit_16_T;
      From : Unsigned_16_T)
   return Unsigned_16_T;
   --
   -- Extracts and returns the bits of "From" between
   -- bit number "High" (msb) and "Low" (lsb).
   -- The extracted bits are returned in the lsb's of the result.
   -- For example, if one bit is extracted, the value is 0 or 1.


   function Bits (
      High : Bit_32_T;
      Low  : Bit_32_T;
      From : Unsigned_32_T)
   return Unsigned_32_T;
   --
   -- Extracts and returns the bits of "From" between
   -- bit number "High" (msb) and "Low" (lsb).
   -- The extracted bits are returned in the lsb's of the result.
   -- For example, if one bit is extracted, the value is 0 or 1.


   function Bit (Number : Octet_Bit_T; From : Octet_T) return Boolean;
   --
   -- Extracts the Numbered bit From the octet and returns it as a
   -- Boolean value (0 = False, 1 = True).


   function Bit (Number : Bit_16_T; From : Unsigned_16_T) return Boolean;
   --
   -- Extracts the Numbered bit From the given 16-bit number and returns
   -- it as a Boolean value (0 = False, 1 = True).


   function Bit (Number : Bit_32_T; From : Unsigned_32_T) return Boolean;
   --
   -- Extracts the Numbered bit From the given 32-bit number and returns
   -- it as a Boolean value (0 = False, 1 = True).


   --
   --    Strings
   --


   function String_To_Null (From : access Ada.Streams.Root_Stream_Type'Class)
   return String;
   --
   -- The string of characters (octets) from the current position of the
   -- stream up to but not including a null octet. The null octet is also
   -- consumed from the stream.


   --
   --    File segments:
   --


   type Segment_Desc_T is record
      Start  : IO.Positive_Count;
      Octets : IO.Count;
   end record;
   --
   -- Describes the location and length of a segment within a program
   -- binary file. The word "segment" is here used in a very general
   -- way, not limited to e.g. an piece of program code (part of a
   -- memory image) but just meaning a contiguous part of the file.
   --
   -- Start
   --    The I/O index of the start of the segment.
   -- Octets
   --    The length of the segment in octets.
   --
   -- If the Octet component is zero, the descriptor is "null" which
   -- is used to show that the section or segment is absent.


   function Is_Null (Item : Segment_Desc_T) return Boolean;
   --
   -- Whether the section/segment descriptor is null, meaning that
   -- no such section/segment exists in the binary file.


   --
   --    Image functions:
   --


   function Image (Item : Octet_T) return String;
   --
   -- Hexadecimal form, 2 digits, no separators.


   function Hex_Image (Item : Octet_T) return String
   renames Image;
   --
   -- More consistent name with the other functions below.


   function Image (Item : Octets_T) return String;
   --
   -- Concatenation of the Images of the array elements.


   function Hex_Image (Item : Octets_T) return String
   renames Image;
   --
   -- More consistent name with the other functions below.


   function Hex_Image (
      Item   : Unsigned_16_T;
      Width  : Positive := 6;
      Prefix : Boolean  := True)
   return String;
   --
   -- The Item formatted in hex as "0xNNNN", with zeros inserted
   -- after the x to bring the total length to Width (or more).
   -- Setting Prefix to False eliminates the "0x" prefix.


   function Hex_Image (
      Item   : Unsigned_32_T;
      Width  : Positive := 10;
      Prefix : Boolean  := True)
   return String;
   --
   -- The Item formatted in hex as "0xNNNNNNNN", with zeros inserted
   -- after the x to bring the total length to Width (or more).
   -- Setting Prefix to False eliminates the "0x" prefix.


   function Hex_Image (
      Item   : Signed_32_T;
      Width  : Positive := 10;
      Prefix : Boolean  := True)
   return String;
   --
   -- The Item formatted in hex as "0xNNNNNNNN", with zeros inserted
   -- after the x to bring the total length to Width (or more).
   -- Setting Prefix to False eliminates the "0x" prefix.


end Formats;
