-- Devices.Catalog (decl)
--
-- A catalog of devices.
--
-- An item in the catalog can define exactly one device, or a set
-- of devices that share some properties but differ in details, for
-- example in the amount of memory of various sorts. The devices in the
-- catalog can be looked up by name (a catalog item can respond to
-- several names, for ditto devices) and enumerated in a listing (where
-- each item is listed once, although it can represent several devices).
--
-- Author: Niklas Holsti, Tidorum Ltd.
--
-- A component of the Bound-T Timing Analysis Tool.
--
-------------------------------------------------------------------------------
-- Copyright (c) 1999 .. 2015 Tidorum Ltd
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are met:
--
-- 1. Redistributions of source code must retain the above copyright notice, this
--    list of conditions and the following disclaimer.
-- 2. Redistributions in binary form must reproduce the above copyright notice,
--    this list of conditions and the following disclaimer in the documentation
--    and/or other materials provided with the distribution.
--
-- This software is provided by the copyright holders and contributors "as is" and
-- any express or implied warranties, including, but not limited to, the implied
-- warranties of merchantability and fitness for a particular purpose are
-- disclaimed. In no event shall the copyright owner or contributors be liable for
-- any direct, indirect, incidental, special, exemplary, or consequential damages
-- (including, but not limited to, procurement of substitute goods or services;
-- loss of use, data, or profits; or business interruption) however caused and
-- on any theory of liability, whether in contract, strict liability, or tort
-- (including negligence or otherwise) arising in any way out of the use of this
-- software, even if advised of the possibility of such damage.
--
-- Other modules (files) of this software composition should contain their
-- own copyright statements, which may have different copyright and usage
-- conditions. The above conditions apply to this file.
-------------------------------------------------------------------------------
--
-- $Revision: 1.2 $
-- $Date: 2015/10/24 19:36:48 $
--
-- $Log: devices-catalog.ads,v $
-- Revision 1.2  2015/10/24 19:36:48  niklas
-- Moved to free licence.
--
-- Revision 1.1  2012-01-19 20:13:56  niklas
-- BT-CH-0224: Device.Catalog added. Device options updated.
--


with Ada.Strings.Unbounded;


package Devices.Catalog is


   --
   ---   Catalog items, general
   --


   type Item_T is abstract tagged null record;
   --
   -- The root type for catalog items.


   type Item_Ref is access all Item_T'Class;
   --
   -- Refers to some catalog item, of some kind.


   function Device_By (
      Name : String;
      From : Item_T)
   return Device_Ref
   is abstract;
   --
   -- The device by the given Name, From the set of devices
   -- represented by the given catalog tem, or null if this
   -- item does not represent a device with this Name.
   --
   -- Whether the Name is case-sensitive depends on the Item.
   --
   -- When the result is not null, the underlying device object
   -- may have been created (allocated) as a result of the look-up,
   -- or may have been created earlier. In any case, the caller
   -- should not attempt to deallocate the device object.


   function Name_Of (Item : Item_T)
   return String
   is abstract;
   --
   -- The name of this Item, by which the option system can
   -- look up its description from the "help" texts.
   --
   -- For Items that represent a single device, this should be
   -- a Name that makes the Device_Of function return this device.
   --
   -- For Items that represent several devices, the Name_Of the
   -- item will typically contain place-holder symbols that must be
   -- replaced by specific values in the Name for Device_Of.


   --
   ---   Catalog items that represent a single device
   --


   type One_Device_Factory_T is access function return Device_Ref;
   --
   -- A function that generates a device object of a single kind,
   -- specific to the function.


   type One_Device_Item_T is new Item_T
   with record
      Name    : Ada.Strings.Unbounded.Unbounded_String;
      Factory : One_Device_Factory_T;
   end record;
   --
   -- A catalog item that represents one type of device, generated
   -- by the given Factory, with the given Name.


   overriding
   function Device_By (
      Name : String;
      From : One_Device_Item_T)
   return Device_Ref;
   --
   -- The device generated by Item.Factory, if the Name
   -- equals Item.Name (with case-insensitive comparison),
   -- else null.


   overriding
   function Name_Of (Item : One_Device_Item_T)
   return String;
   --
   -- Item.Name, natch.


   --
   ---   Catalog operations
   --


   procedure Enter (Item : in Item_Ref);
   --
   -- Enters an item into the catalog.


   procedure Enter (
      Name   : in String;
      Device : in One_Device_Factory_T);
   --
   -- Enters an item that represents one type of Device, with
   -- one Name, into the catalog.


   function Device_By (Name : String)
   return Device_Ref;
   --
   -- The device by the given Name, if one is represented in the
   -- catalog, or null otherwise.
   --
   -- The value is returned by the Device_By function from some
   -- item in the catalog, wherefore the same notes regarding
   -- device-object creation, allocation, and deallocation apply
   -- as for the Device_By primitive for Item_T.


   type Iterator_T is private;
   --
   -- For traversing all items in the catalog.
   -- Default initial position refers to the first item in the
   -- catalog (if any).


   procedure Reset (Iter : in out Iterator_T);
   --
   -- Sets the iterator to the first item in the catalog.


   function Item (Iter : Iterator_T) return Item_Ref;
   --
   -- The current item under the iterator.
   -- Null if the iterator has reached the end of the catalog.


   procedure Next (Iter : in out Iterator_T);
   --
   -- Advances the iterator to the next item in the catalog.


private


   type Iterator_T is record
      Index : Positive := 1;
   end record;
   --
   -- The Index is the number of the current item in the catalog
   -- for this iterator.


end Devices.Catalog;
